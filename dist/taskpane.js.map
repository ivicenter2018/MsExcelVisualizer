{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html","webpack://office-addin-taskpane-js/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/compat get default export","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/MyFormula.js","webpack://office-addin-taskpane-js/./src/taskpane/MyTable.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.js\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>FormuleViewer</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\"><\" + \"/script> <\" + \"script src=\\\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <h1 class=\\\"ms-font-su\\\">FormuleViewer</h1> <br> <button class=\\\"ms-Button-label\\\" id=\\\"reloadButton\\\">Recargar Complemento</button> </header> <div id=\\\"initialInterface\\\"> <p id=\\\"ms-warning\\\" class=\\\"ms-warning\\\">Para poder visualizar los datos correctamente debes asegurarte de dar formato como tabla para que se puedan reconocer <a class=\\\"ms-link-label\\\" href=\\\"https://support.microsoft.com/en-us/office/create-and-format-tables-e81aa349-b006-4f8a-9806-5af9df0ac664\\\">Ayuda</a> </p> <div role=\\\"button\\\" id=\\\"loadData\\\" href=\\\"#taskpaneData.html\\\" class=\\\"ms-welcome__action ms-Button ms-Button--hero ms-font-xl\\\"> <span class=\\\"ms-Button-label\\\">Cargar Visualización</span> </div> </div> <br> <br> <section class=\\\".ms-Button-label\\\"> <button id=\\\"findFormulasSelectedRange\\\" hidden=\\\"true\\\">Buscar celda seleccionada</button> <button id=\\\"cancelFindFormulasSelectedRange\\\" hidden=\\\"true\\\">Cancelar búsqueda</button> <button id=\\\"generateWorksheetData\\\" hidden=\\\"true\\\">Ver Datos en Excel</button> </section> <br> <br> <section id=\\\"searchByName\\\" class=\\\".ms-Button-label\\\" hidden=\\\"true\\\"> <input id=\\\"findFormulaByName\\\" type=\\\"text\\\" placeholder=\\\"Ej: SUM\\\"> <button id=\\\"findFormulaByNameButton\\\">Buscar</button> <button id=\\\"cancelFindFormulasByName\\\" hidden=\\\"true\\\">Cancelar búsqueda</button> </section> <section id=\\\"showSearchError\\\" hidden=\\\"true\\\"> <div> <h3 class=\\\"showSearchError\\\">Formulas not found</h3> </div> </section> <br> <section> <div id=\\\"tablesSpace\\\" class=\\\"tablesSpaceClass\\\" hidden=\\\"true\\\"></div> </section> <section> <div id=\\\"loadInfo\\\" hidden=\\\"true\\\"> <p id=\\\"loadInforMs\\\"></p> </div> </section> <section> <h2 id=\\\"idFormula\\\" class=\\\"formulesSpaceTitle\\\"></h2> <div id=\\\"colorPickerSpace\\\" hidden=\\\"true\\\"> <div id=\\\"colorPickerInterface\\\"> <input type=\\\"color\\\" id=\\\"colorPicker\\\" name=\\\"colorPicker\\\" value=\\\"#478C3B\\\"> <button id=\\\"colorButtonInterface\\\">Cambiar color grafo</button> </div> </div> <div id=\\\"formulesSpace\\\" class=\\\"formulesSpace\\\"></div> </section> <section> <div id=\\\"pageControl\\\" class=\\\"pageControl\\\" hidden=\\\"true\\\"> <button id=\\\"backPageBtn\\\" class=\\\"pageButtonPanel\\\">&lt;</button> <span id=\\\"currentPageDisplay\\\"></span> <button id=\\\"nextPageBtn\\\" class=\\\"pageButtonPanel\\\">&gt;</button> <span id=\\\"totalPagesDisplay\\\"></span> <input type=\\\"number\\\" id=\\\"pageInputFilter\\\" placeholder=\\\"Num.\\\"> <button id=\\\"filterPageBtn\\\" class=\\\"pageButtonPanel\\\">Search</button> </div> </section> </body> </html>\";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t41: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// JavaScript source code\r\n\r\n\r\n\r\nexport default class MyFormula {\r\n\r\n    name;\r\n    body;   \r\n    precedentsCells;\r\n    \r\n\r\n    constructor(nameAux, body) {\r\n        this.name = nameAux;\r\n\r\n        this.body = body;\r\n       \r\n        this.precedentsCells = new Set();\r\n        \r\n    }\r\n\r\n    setPrecedentsCells(precedents){\r\n       this.precedentsCells.add(precedents);\r\n    }\r\n    getNombre(){\r\n        return this.name;\r\n    }\r\n    getBody(){\r\n        return this.body;\r\n    }\r\n\r\n    \r\n    getPrecedentsCells(){\r\n        //console.log(this.precedentsCells);\r\n        return this.precedentsCells;\r\n    }\r\n\r\n   \r\n}\r\n","// JavaScript source code\r\n\r\nexport default class MyTable {\r\n\r\n    name;\r\n    formulas;\r\n    size;\r\n\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.formulas = new Map();\r\n        this.size = 0;\r\n        \r\n    }\r\n\r\n    newFormula(id, newFormula) {\r\n        this.formulas.set(id, newFormula);\r\n        this.size++;\r\n    }\r\n    getNombre() {\r\n        return this.name;\r\n    }\r\n\r\n    getFormulas() {\r\n        return this.formulas;\r\n\r\n    }\r\n\r\n    getSize() {\r\n       return this.size;\r\n\r\n    }\r\n}","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\n\r\nimport MyFormula from './MyFormula.js';\r\nimport MyTable from './MyTable.js';\r\n\r\n//#region Global variables\r\nlet globalTables = new Map();\r\nlet currentIndex = 0;\r\nlet maxFormulaContainer = 0 ;\r\nlet currentTable = \"\";\r\nlet currentPageInterface = 1;\r\nlet customColor1=\"#478C3B\";\r\nlet tableInfoId =0;\r\nconst NM_PAGES = 10 ;\r\n\r\n//#endregion Global variables\r\n\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-Main function \r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nOffice.onReady((info) => {\r\n    if (info.host === Office.HostType.Excel) {\r\n\r\n\r\n\r\n        document.getElementById(\"reloadButton\").addEventListener(\"click\", function () {\r\n            location.reload();\r\n            \r\n        });\r\n        document.getElementById(\"loadData\").addEventListener(\"click\", function () {\r\n            \r\n            getTables();\r\n            \r\n\r\n         });\r\n\r\n        document.getElementById(\"findFormulasSelectedRange\").addEventListener(\"click\", function () {\r\n            currentTable = \"RangeTable\";\r\n            globalTables.set(\"RangeTable\", new MyTable(\"RangeTable\"));\r\n            (async () => {\r\n                await findFormulaBySelectedRange();\r\n                await loadPageData(\"RangeTable\");\r\n                await showFormulaData(\"RangeTable\",0);\r\n            })();\r\n           \r\n           document.getElementById(\"cancelFindFormulasSelectedRange\").hidden=false;\r\n           document.getElementById(\"tablesSpace\").hidden = true;\r\n        });\r\n\r\n        document.getElementById(\"generateWorksheetData\").addEventListener(\"click\", function () {\r\n            generateWorksheetInfo();\r\n        });\r\n\r\n        document.getElementById(\"cancelFindFormulasSelectedRange\").addEventListener(\"click\", function () {\r\n            \r\n            //Clean the data \r\n            document.getElementById(\"formulesSpace\").innerHTML=\"\";\r\n            document.getElementById(\"idFormula\").textContent=\"\";\r\n            document.getElementById(\"tablesSpace\").hidden = false;\r\n            document.getElementById(\"cancelFindFormulasSelectedRange\").hidden=true;\r\n            document.getElementById(\"showSearchError\").hidden=true;\r\n         });\r\n         document.getElementById(\"findFormulaByNameButton\").addEventListener(\"click\",async function () {\r\n            \r\n            currentTable = \"RangeTable\";\r\n            globalTables.set(\"RangeTable\", new MyTable(\"RangeTable\"));\r\n            \r\n            let fName = document.getElementById(\"findFormulaByName\").value;\r\n            \r\n            if(checkInputInterface(1,fName)){\r\n                \r\n                (async () => {\r\n                    \r\n                    await findFormulasByName(fName);\r\n                    await loadPageData(\"RangeTable\");\r\n                    await showFormulaData(\"RangeTable\",0);\r\n                })();\r\n                document.getElementById(\"cancelFindFormulasByName\").hidden=false;\r\n                document.getElementById(\"tablesSpace\").hidden = true;\r\n            }else{\r\n                showInputError()\r\n            }\r\n            \r\n         });\r\n \r\n         document.getElementById(\"cancelFindFormulasByName\").addEventListener(\"click\", function () {\r\n            \r\n             //Clean the data \r\n            document.getElementById(\"formulesSpace\").innerHTML=\"\";\r\n            document.getElementById(\"idFormula\").textContent=\"\";\r\n            document.getElementById(\"tablesSpace\").hidden = false;\r\n            document.getElementById(\"showSearchError\").hidden=true;\r\n            let buttonCancelSearch= document.getElementById(\"cancelFindFormulasByName\");\r\n            let searchInput= document.getElementById(\"findFormulaByName\");\r\n            searchInput.value=\"\";\r\n            buttonCancelSearch.hidden=true;\r\n             \r\n          });\r\n\r\n          document.getElementById(\"backPageBtn\").addEventListener(\"click\", async function () {\r\n\r\n            document.getElementById(\"currentPageDisplay\").innerHTML = await getPageIndexInterface(false);\r\n            let newStartIndex = await getPageIndex(false);\r\n            currentIndex = newStartIndex;\r\n            console.log(\" current Index:\" + currentIndex);\r\n            showFormulaData(currentTable,newStartIndex);\r\n         });\r\n\r\n         document.getElementById(\"nextPageBtn\").addEventListener(\"click\", async function () {\r\n            document.getElementById(\"currentPageDisplay\").innerHTML = await getPageIndexInterface(true);\r\n            let newStartIndex = await getPageIndex(true);\r\n            currentIndex = newStartIndex;\r\n            console.log(\" current Index:\" + currentIndex);\r\n            showFormulaData(currentTable,newStartIndex);\r\n         });\r\n        \r\n         document.getElementById(\"filterPageBtn\").addEventListener(\"click\",  async function () {\r\n            let filterPageValue = document.getElementById(\"pageInputFilter\").value;\r\n            filterPageValue = parseInt(filterPageValue);\r\n            debugger;\r\n            if(checkInputInterface(2,filterPageValue)){\r\n                let newStartIndex = (filterPageValue-1)*NM_PAGES;\r\n                showFormulaData(currentTable,newStartIndex);\r\n                document.getElementById(\"currentPageDisplay\").innerHTML = filterPageValue;\r\n                currentPageInterface = filterPageValue;\r\n                currentIndex = newStartIndex;\r\n            }else{\r\n                showInputError();\r\n            }\r\n            \r\n            \r\n         });\r\n         document.getElementById('colorButtonInterface').addEventListener('click',async function() {\r\n            let color = document.getElementById('colorPicker').value;\r\n            customColor1=color;\r\n            showFormulaData(currentTable,currentIndex);\r\n            \r\n        });\r\n    }\r\n});\r\n\r\n\r\n\r\n//#region TASK PANE FUNCTIONS\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function works by getting the tables from the active worksheet.\r\n-Does not receive parameters\r\n-Call to more functions: getFormulasOfTable , showTableData.\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function getTables() {\r\n    try {\r\n\r\n        await Excel.run(async (context) => {\r\n\r\n            \r\n\r\n            //We load the data from the tables of the active Worksheet\r\n            const sheetAux = context.workbook.worksheets.getActiveWorksheet();\r\n            const tablesAux = sheetAux.tables;\r\n\r\n            tablesAux.load('items/name');\r\n\r\n            await context.sync();\r\n            \r\n\r\n            if(tablesAux.items.length==0){\r\n\r\n                document.getElementById('ms-warning').className = \"ms-warningActive\";\r\n\r\n            }else{\r\n                \r\n                document.getElementById(\"loadInfo\").hidden=false;\r\n                document.getElementById(\"findFormulasSelectedRange\").hidden=false;\r\n                document.getElementById(\"searchByName\").hidden=false;\r\n                document.getElementById(\"initialInterface\").hidden = true;\r\n                document.getElementById(\"tablesSpace\").innerHTML = \"\";\r\n                document.getElementById(\"tablesSpace\").hidden = false;\r\n                document.getElementById(\"generateWorksheetData\").hidden = false;\r\n\r\n                \r\n                for(const table of tablesAux.items){\r\n                    //Store the table structure\r\n                    let currentTable = new MyTable(table.name);\r\n                    globalTables.set(table.name, currentTable);\r\n    \r\n                   await getFormulasOfTable(table.name);\r\n                    \r\n                    showTableData(table.name)\r\n\r\n                }\r\n                //Pre-load a AuxTable por the range filter\r\n                let currentTable = new MyTable(\"RangeTable\");\r\n                globalTables.set(\"RangeTable\", currentTable);\r\n                \r\n            }\r\n            document.getElementById(\"loadInfo\").hidden=true;\r\n\r\n        });\r\n\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-Search cell by cell in a tablefor possible formulas.Stores the position of the formula and the body.After that it searches\r\nfor the precedents of the formula.It ends by storing the data.\r\n-Receives one parameter, the name of the table works with.\r\n-Call another function: getAddressPrecedents.\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function getFormulasOfTable(nameTable) {\r\n    try {\r\n        return await Excel.run(async (context) => {\r\n\r\n            const sheetAux = context.workbook.worksheets.getActiveWorksheet();\r\n            const tableAux = sheetAux.tables.getItem(nameTable);\r\n            //Get the range values of the table\r\n            let rangeTable = tableAux.getDataBodyRange();\r\n            //Get the values and the adress property of each cell\r\n            rangeTable.load(\"formulas\");\r\n            const propertiesToGet = rangeTable.getCellProperties({\r\n                address: true\r\n            });\r\n            await context.sync();\r\n\r\n\r\n            let n=1;\r\n            for (let i = 0; i < rangeTable.formulas.length; i++) {\r\n\r\n                for (let j = 0; j < rangeTable.formulas[i].length; j++) {\r\n                    //When we get a cell that is a formule, we store it properly\r\n                    if (rangeTable.formulas[i][j].toString().startsWith(\"=\")) {\r\n                        \r\n                        const cellAddress = propertiesToGet.value[i][j];\r\n                        // cellAddress returns sheet1!F5 , we get only F5\r\n                        let addressAux = cellAddress.address.slice(cellAddress.address.lastIndexOf(\"!\") + 1);\r\n                        let formuleAux = rangeTable.formulas[i][j].toString();\r\n                        let bodyAux = formuleAux.slice(1, formuleAux.length);\r\n\r\n\r\n                        let currentFormula = new MyFormula(addressAux, bodyAux);\r\n\r\n                        //Set precedents of the formula\r\n                        const rangeAux = sheetAux.getRange(addressAux);\r\n                        const precedentsAux = rangeAux.getDirectPrecedents()\r\n                        precedentsAux.areas.load(\"address\");\r\n                        await context.sync();\r\n\r\n                        for (let p = 0; p < precedentsAux.areas.items.length; p++) {\r\n\r\n                            const precedents = await getAddressPrecedents(precedentsAux.areas.items[p].address);\r\n                            currentFormula.setPrecedentsCells(precedents);\r\n                            \r\n                        }\r\n\r\n                        //Store the formula in his table\r\n                        let tableAux2 = globalTables.get(nameTable);\r\n                        tableAux2.newFormula(addressAux, currentFormula);\r\n                        \r\n                        document.getElementById(\"loadInforMs\").innerHTML=\"Loading \" + n + \" formulas ...\"\r\n                        n=n+1;\r\n                        globalTables.set(nameTable, tableAux2);\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n            }\r\n            return 0;\r\n\r\n\r\n        });\r\n\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This functions searches for the precedents of a range filtering the data to be returned in a more undertandable format\r\n-Receives one parameter, a string which return the function getPrecedents.\r\n-Does not call another aux function.\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function getAddressPrecedents(outString) {\r\n    try {\r\n        return await Excel.run(async (context) => {\r\n\r\n            const sheetName = context.workbook.worksheets.getActiveWorksheet();\r\n            const addressAux = outString.split(','); // Split the string in diferent precedents\r\n            const precedentsAux = [];\r\n\r\n            sheetName.load(\"name\");\r\n            await context.sync();\r\n            addressAux.forEach(a => {\r\n\r\n                const elements = a.split('!');\r\n                let newPrecedent;\r\n                if (sheetName.name != elements[0]) {\r\n                    newPrecedent = a;\r\n                } else {\r\n                    newPrecedent = elements[1]; //Store only the range without the Sheet name\r\n\r\n                }\r\n                precedentsAux.push(newPrecedent);\r\n\r\n            });\r\n\r\n            return precedentsAux;\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for obtaining the formulas from a  selected range range .\r\n-It receive parameters: the range over witch to obtain the cells\r\n-Does not call another aux function: getCellsFromRange,generateFormulaGrid, generateVisGraph,\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function findFormulaBySelectedRange() {\r\n    try {\r\n        await Excel.run(async (context) => {\r\n\r\n            const sheetAux = context.workbook.worksheets.getActiveWorksheet();\r\n            let rangeTable = context.workbook.getSelectedRange();\r\n            rangeTable.load(\"formulas\");\r\n            const propertiesToGet = rangeTable.getCellProperties({\r\n                address: true\r\n            });\r\n            await context.sync();\r\n\r\n            let formulasNotFindedflag = true;\r\n\r\n            for (let i = 0; i < rangeTable.formulas.length; i++) {\r\n\r\n                for (let j = 0; j < rangeTable.formulas[i].length; j++) {\r\n                    //When we get a cell that is a formule, we store it properly\r\n                    if (rangeTable.formulas[i][j].toString().startsWith(\"=\")) {\r\n                        formulasNotFindedflag=false;\r\n                        const cellAddress = propertiesToGet.value[i][j];\r\n                        // cellAddress returns sheet1!F5 , we get only F5\r\n                        let addressAux = cellAddress.address.slice(cellAddress.address.lastIndexOf(\"!\") + 1);\r\n                        let formuleAux = rangeTable.formulas[i][j].toString();\r\n                        let bodyAux = formuleAux.slice(1, formuleAux.length);\r\n\r\n\r\n\r\n                        let currentFormula = new MyFormula(addressAux, bodyAux);\r\n\r\n                        //Set precedents of the formula\r\n                        const rangeAux = sheetAux.getRange(addressAux);\r\n                        const precedentsAux = rangeAux.getDirectPrecedents()\r\n                        precedentsAux.areas.load(\"address\");\r\n                        await context.sync();\r\n\r\n                        for (let p = 0; p < precedentsAux.areas.items.length; p++) {\r\n\r\n                            const precedents = await getAddressPrecedents(precedentsAux.areas.items[p].address);\r\n                            currentFormula.setPrecedentsCells(precedents);\r\n                        }\r\n\r\n                        //Store the formula in his table\r\n                        let tableAux2 = globalTables.get(\"RangeTable\");\r\n                        tableAux2.newFormula(addressAux, currentFormula);\r\n                        globalTables.set(\"RangeTable\", tableAux2);\r\n                       \r\n                        \r\n                        \r\n                    }\r\n\r\n\r\n                }\r\n\r\n            }\r\n            if(formulasNotFindedflag){\r\n                document.getElementById(\"showSearchError\").hidden=false;\r\n            }\r\n            \r\n             \r\n            \r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for obtaining the cells from a range .\r\n-It receive parameters: the range over witch to obtain the cells\r\n-Does not call another aux function: \r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function getCellsFromRange(rangeSelected) {\r\n    try {\r\n        return await Excel.run(async function(context) {\r\n         \r\n          var cells = [];\r\n          \r\n          // Obtener el rango especificado\r\n          let cellsRange = context.workbook.getSelectedRange();\r\n          \r\n          cellsRange.load(\"formulas\");\r\n          const propertiesToGet = cellsRange.getCellProperties({\r\n              address: true\r\n              });\r\n          await context.sync();\r\n  \r\n  \r\n          for (let i = 0; i < cellsRange.formulas.length; i++) {\r\n  \r\n              for (let j = 0; j < cellsRange.formulas[i].length; j++) {\r\n                  //When we get a cell that is a formule, we store it properly\r\n                  \r\n  \r\n                      const cellAddress = propertiesToGet.value[i][j];\r\n                      \r\n                      // cellAddress.address returns sheet1!F5 , we get only F5\r\n                      let addressAux = cellAddress.address.slice(cellAddress.address.lastIndexOf(\"!\") + 1);\r\n                      cells.push(addressAux);\r\n                  \r\n              }\r\n          }\r\n          return cells;\r\n       });\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n}\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for obtaining the formulas from a searched name .\r\n-It receive parameters: the name of a formula\r\n-Does not call another aux function\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function findFormulasByName(fName) {\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            const sheetAux = context.workbook.worksheets.getActiveWorksheet();\r\n\r\n            //Clean the data \r\n            document.getElementById(\"formulesSpace\").innerHTML=\"\";\r\n            document.getElementById(\"idFormula\").textContent=\"\"; \r\n\r\n            let formulasNotFindedflag = true;  \r\n            for(const [tableName, table] of globalTables){          \r\n                if(tableName !=\"RangeTable\"){\r\n                    let formulasAux = table.getFormulas();\r\n                    for(const [fNameAux, f] of formulasAux){\r\n                        \r\n                        \r\n                        let addressFormula = f.getNombre();\r\n                        let bodyFormula = f.getBody();\r\n \r\n                        if((bodyFormula.includes(fName.toLowerCase())) ||(bodyFormula.includes(fName.toUpperCase()) )){ \r\n                            formulasNotFindedflag=false; \r\n                            //Store the formula in his table\r\n                            let currentFormula = new MyFormula(addressFormula, bodyFormula);\r\n\r\n                            //Set precedents of the formula\r\n                            const rangeAux = sheetAux.getRange(fNameAux);\r\n                            const precedentsAux = rangeAux.getDirectPrecedents()\r\n                            precedentsAux.areas.load(\"address\");\r\n                            await context.sync();\r\n\r\n                            for (let p = 0; p < precedentsAux.areas.items.length; p++) {\r\n\r\n                            const precedents = await getAddressPrecedents(precedentsAux.areas.items[p].address);\r\n                            currentFormula.setPrecedentsCells(precedents);\r\n                            }\r\n\r\n\r\n                            let tableAux2 = globalTables.get(\"RangeTable\");\r\n                            tableAux2.newFormula(addressFormula, currentFormula);\r\n                            globalTables.set(\"RangeTable\", tableAux2);\r\n                            \r\n                        }\r\n                    };\r\n                }\r\n                \r\n                \r\n            };\r\n            if(formulasNotFindedflag){\r\n                document.getElementById(\"showSearchError\").hidden=false;\r\n            }\r\n\r\n             \r\n            \r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for obtaining the index to get the page .\r\n-It receive parameters : a boolean for increment (true) or decrement(false)\r\n-Does not call another aux function\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function getPageIndex(increment) {\r\n    try {\r\n        return await Excel.run(async (context) => {\r\n            \r\n             if (increment) {\r\n                currentIndex = currentIndex + NM_PAGES;\r\n                \r\n                if (currentIndex >= maxFormulaContainer) {   \r\n                    currentIndex = maxFormulaContainer - NM_PAGES; \r\n                    \r\n                }\r\n            } else {\r\n                currentIndex = currentIndex - NM_PAGES;\r\n                // Asegurarse de no ser menos de 0\r\n                if (currentIndex < 0) {\r\n                    currentIndex = 0;\r\n                }\r\n                \r\n            }\r\n                   \r\n            return (currentIndex);                \r\n            \r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for obtaining the index for the page interface.\r\n-its receive parameters : a boolean for increment (true) or decrement(false)\r\n-Does not call another aux function\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function getPageIndexInterface(increment) {\r\n    try {\r\n        return await Excel.run(async (context) => {\r\n            \r\n             if (increment) {\r\n                currentPageInterface = Math.min(currentPageInterface+1, Math.ceil(maxFormulaContainer/NM_PAGES));               \r\n            } else {\r\n                currentPageInterface = Math.max(currentPageInterface-1, 1);        \r\n            } \r\n            console.log(currentPageInterface) ;                   \r\n            return (currentPageInterface);       \r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n\r\n//#endregion TASK PANE FUNCTIONS\r\n\r\n\r\n\r\n\r\n\r\n//#region TASK PANE VIEW FUNCTIONS\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for generating the HTML elements that represent the tables of the active worksheet in the control panel.\r\n-Receives as a parameter the name of the table with which to generate the data.\r\n-Call another function:  showFormulaData.\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function showTableData(nameTable) {\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            \r\n\r\n            let tablesSpaceAux = document.getElementById(\"tablesSpace\");\r\n\r\n\r\n            await context.sync();\r\n\r\n           \r\n            let newElement = document.createElement(\"button\");\r\n            newElement.className = \"buttonLink\";\r\n            \r\n            newElement.addEventListener(\"click\", function () { \r\n                currentTable = nameTable;\r\n                loadPageData(nameTable);\r\n                showFormulaData(nameTable,0); \r\n                \r\n                 \r\n            });\r\n            \r\n            newElement.id = nameTable;\r\n            newElement.innerHTML = `${nameTable}`;\r\n\r\n            tablesSpaceAux.appendChild(newElement);\r\n\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for generating the HTML content that displays the formulas and their content of a table in the control panel\r\n-Receives as a parameter the name of the table with which to generate the data.\r\n-Call anotherfunction : GenrateFormulaGrid,generateVisGraph\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function showFormulaData(nameTable,startPageIndex) {\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            //Clean the data \r\n            document.getElementById(\"formulesSpace\").innerHTML=\"\";\r\n            document.getElementById(\"idFormula\").textContent=\"\";\r\n            document.getElementById(\"colorPickerSpace\").hidden=false;\r\n\r\n            let tablaAux = globalTables.get(nameTable);            \r\n            let formulasAux = tablaAux.formulas;\r\n            \r\n            document.getElementById(\"idFormula\").textContent = nameTable;\r\n            const keysArray = Array.from(formulasAux.keys());\r\n            const valuesArray = Array.from(formulasAux.values());\r\n            let endPageIndex = Math.min(startPageIndex + NM_PAGES, maxFormulaContainer);\r\n\r\n            for (let i = startPageIndex; i < endPageIndex && i < keysArray.length; i++) {\r\n                const key = keysArray[i];\r\n                const value = valuesArray[i];\r\n              \r\n\r\n                generateFormulaGrid(key, value.getBody());\r\n                generateVisGraph(key, nameTable);\r\n            }\r\n            \r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for generating the HTML content that displays the formula and their content of a table in the control panel\r\n-Receives as a parameter the key (range of the formula) and the value of it\r\n-Does not call another function  \r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function generateFormulaGrid(key, value) {\r\n    let formulasSpaceAux = document.getElementById(\"formulesSpace\");\r\n    \r\n    let formulaContainer = document.createElement(\"div\");\r\n    formulaContainer.id = key;\r\n    formulaContainer.className = \"formulaContent\";\r\n    formulaContainer.addEventListener(\"mouseover\", function () {\r\n        locateRange(key);\r\n    });\r\n\r\n\r\n    let formulaKeyContainer = document.createElement(\"h3\");\r\n    formulaKeyContainer.innerHTML = key;\r\n\r\n    let formulaBodyContainer = document.createElement(\"p\");\r\n    formulaBodyContainer.innerHTML = value;\r\n\r\n    formulaContainer.appendChild(formulaKeyContainer);\r\n    formulaContainer.appendChild(formulaBodyContainer);\r\n    formulasSpaceAux.appendChild(formulaContainer);\r\n}\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for generating the HTML content that displays the graphs and their content of a formula in the control panel\r\n-Receives as a parameters the name of the table and the range formula.\r\n-Call another function : networkFunctionRange\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function generateVisGraph(rangeFormula, nameTable) {\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            \r\n            let nodesAux = [];\r\n            let edgesAux = [];\r\n            let tablaAux = globalTables.get(nameTable);\r\n            let formulasAux = tablaAux.getFormulas();\r\n            let currentFormula = formulasAux.get(rangeFormula);\r\n\r\n            let firstNode = { id: rangeFormula, label: rangeFormula, color: { background: customColor1 } };\r\n            nodesAux.push(firstNode);\r\n\r\n            currentFormula.getPrecedentsCells().forEach((precedent) => {\r\n\r\n                if (!nodesAux.includes(precedent)) {\r\n                    let nodeAux, edgeAux;\r\n                    //console.log(precedent.length);\r\n                    for (let i = 0; i < precedent.length; i++) {\r\n\r\n                        //console.log(precedent[i]);\r\n                        nodeAux = {\r\n                            id: precedent[i],\r\n                            label: precedent[i]\r\n                        };\r\n                        edgeAux = {\r\n                            from: precedent[i],\r\n                            to: rangeFormula\r\n                        };\r\n                        nodesAux.push(nodeAux);\r\n                        edgesAux.push(edgeAux);\r\n                    }\r\n\r\n                } else {\r\n                   // console.log(precedent);\r\n                    let edgeAux = {\r\n                        from: precedent,\r\n                        to: rangeFormula\r\n                    };\r\n                    edgesAux.push(edgeAux);\r\n                }\r\n\r\n            });\r\n           //console.log(nodesAux);\r\n            // Datos del grafo\r\n            let nodes = new vis.DataSet(nodesAux);\r\n            let edges = new vis.DataSet(edgesAux);\r\n\r\n            //console.log(rangeFormula);\r\n            //Make a contaner for the control panel with the HTML\r\n            let containerFormula = document.getElementById(rangeFormula);\r\n            let containerGraph = document.createElement(\"div\");           \r\n            containerGraph.classList.add(\"graphContainer\");\r\n            \r\n            containerFormula.appendChild(containerGraph);\r\n\r\n            //Create the graph using Vis.js library\r\n\r\n            const data = { nodes: nodes, edges: edges };\r\n            const options = {};\r\n            const network = new vis.Network(containerGraph, data, options);\r\n\r\n            //Add the functionality for locate range clicking on the node in the control panel\r\n            network.on('click', function (params) {\r\n                if (params.nodes.length > 0) {\r\n        \r\n                    let nodeId = params.nodes[0];\r\n                    let node = nodes.get(nodeId); \r\n                    locateRange(node.id);\r\n                    \r\n                }\r\n            });\r\n\r\n        });\r\n\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for indicating in the Excel sheet the cell that is being viewed in the control panel.\r\n-It receives as a parameter the range that it must indicate\r\n-Does not call another aux function\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function locateRange(range) {\r\n    try {\r\n        await Excel.run(async (context) => {\r\n\r\n            const currentSheet = context.workbook.worksheets.getActiveWorksheet();\r\n            const rangeAux = currentSheet.getRange(range);\r\n\r\n            rangeAux.select();\r\n            await context.sync();\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for load the values for the control panel page .\r\n-It receives as a parameter a nameTable \r\n-Does not call another aux function\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function loadPageData(nameTable){\r\n    \r\n    try {\r\n        await Excel.run(async (context) => {\r\n            \r\n            document.getElementById(\"pageControl\").hidden=false;\r\n            let tablaAux = globalTables.get(nameTable); \r\n            maxFormulaContainer=tablaAux.getSize();\r\n            document.getElementById(\"currentPageDisplay\").innerHTML = currentPageInterface;\r\n            document.getElementById(\"totalPagesDisplay\").innerHTML = \"MAX : \" + Math.max(Math.ceil(maxFormulaContainer/NM_PAGES),1);\r\n            \r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible of checking the input interface.\r\n-Does not receive parameters : a number for use the correct check\r\n-Does not call another aux function\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function checkInputInterface(typeCheck,value) {\r\n    try {\r\n        return await Excel.run(async (context) => {\r\n            \r\n            switch(typeCheck){\r\n                case 1:\r\n                    if(typeof value != \"string\"){\r\n                        console.log(\"Error\");\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    if(typeof value != \"number\" || value > Math.ceil(maxFormulaContainer/NM_PAGES)){\r\n                        console.log(\"Error\");\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n            }\r\n           return true;\r\n            \r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n//#endregion\r\n\r\n\r\n\r\n//#region GetInfo\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function works by check if a new worksheet name exist.\r\n-Does  receive parameters: \r\n-Does not call another aux function\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\n\r\nexport async function doesWorksheetExist(context, sheetName) {\r\n    const sheets = context.workbook.worksheets;\r\n    sheets.load(\"items/name\");\r\n    await context.sync();\r\n\r\n    // Buscar si alguna hoja tiene el mismo nombre\r\n    for (const sheet of sheets.items) {\r\n        if (sheet.name === sheetName) {\r\n            return true; // La hoja ya existe\r\n        }\r\n    }\r\n\r\n    return false; // No existe\r\n}\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function works by generating a new worksheet with the data obtained.\r\n-Does not receive parameters\r\n-Call another aux function : doesWorksheetExist()\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function generateWorksheetInfo() {\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            \r\n            let worksheetNameAux = \"FormulaViewerData_\" + tableInfoId;\r\n            tableInfoId += 1;\r\n\r\n            // Verifica si la hoja ya existe\r\n            while (await doesWorksheetExist(context, worksheetNameAux)) {\r\n                worksheetNameAux = \"FormulaViewerData_\" + tableInfoId;\r\n                tableInfoId += 1;\r\n            }\r\n\r\n            const worksheet = context.workbook.worksheets.add(worksheetNameAux);\r\n            await context.sync(); // Sincroniza para asegurarse de que la hoja está creada\r\n\r\n            let auxRange = 1; \r\n\r\n            for (const [tableName, table] of globalTables) {\r\n                if(tableName != \"RangeTable\"){\r\n                    let startRow = auxRange + 1; \r\n                let startRange = `B${startRow}:C${startRow}`;\r\n                //let startRangeChart = `E${startRow}:F${startRow}`;  \r\n\r\n                // Crear la tabla en el rango especificado\r\n                let tableData = worksheet.tables.add(startRange, true);  // hasHeaders = true\r\n                // Crear grafico     \r\n                //const chart = sheet.charts.add(Excel.ChartType.pie, dataRange, Excel.ChartSeriesBy.columns);\r\n        \r\n\r\n                await context.sync();  // Sincroniza antes de asignar el nombre para asegurarse de que tableData está listo\r\n                \r\n                // Verificar que el nombre de la tabla sea único y válido\r\n                let nombreTabla = tableName + \"_Aux\" + tableInfoId;\r\n                console.log(nombreTabla);\r\n                // Asignar el nombre único a la tabla\r\n                tableData.name = nombreTabla;\r\n                \r\n                // Asignar los encabezados\r\n                tableData.getHeaderRowRange().values = [[\"Cell\", \"Formula\"]];\r\n\r\n                // Preparar los datos de las fórmulas\r\n                let formulaRows = [];\r\n                for (const [formulaId, formula] of table.formulas) {\r\n                    formulaRows.push([formulaId, formula.body]);\r\n                }\r\n                \r\n                // Agregar los datos de las fórmulas\r\n                tableData.rows.add(null, formulaRows);\r\n\r\n                auxRange += formulaRows.length + 2;\r\n\r\n                // Auto-ajustar columnas y filas si la versión de la API lo soporta\r\n                if (Office.context.requirements.isSetSupported(\"ExcelApi\", \"1.2\")) {\r\n                    worksheet.getUsedRange().format.autofitColumns();\r\n                    worksheet.getUsedRange().format.autofitRows();\r\n                }\r\n\r\n                worksheet.activate();\r\n                await context.sync();  // Sincroniza los cambios\r\n                }\r\n                \r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------------------\r\n-This function is responsible for show the error input.\r\n-Does not receives  a parameter\r\n-Does not call another aux function\r\n---------------------------------------------------------------------------------------------------------------------------------------*/\r\nexport async function showInputError(){\r\n    \r\n    try {\r\n        await Excel.run(async (context) => {\r\n            alert(\"Error al filtrar\");\r\n            \r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","MyFormula","nameAux","body","_classCallCheck","_defineProperty","name","precedentsCells","Set","value","precedents","add","MyTable","formulas","Map","size","id","newFormula","set","_regeneratorRuntime","t","r","Symbol","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","args","arguments","apply","err","globalTables","currentIndex","maxFormulaContainer","currentTable","currentPageInterface","customColor1","tableInfoId","NM_PAGES","_getTables","_callee9","_context9","Excel","run","_ref8","_callee8","context","sheetAux","tablesAux","_iterator","_step","table","_currentTable2","_currentTable","_context8","workbook","worksheets","getActiveWorksheet","tables","load","sync","items","getElementById","className","hidden","innerHTML","_createForOfIteratorHelper","getFormulasOfTable","showTableData","t0","_x20","console","_x","_getFormulasOfTable","_callee11","nameTable","_context11","_ref9","_callee10","tableAux","rangeTable","propertiesToGet","j","cellAddress","addressAux","formuleAux","bodyAux","currentFormula","rangeAux","precedentsAux","tableAux2","_context10","getItem","getDataBodyRange","getCellProperties","address","toString","startsWith","lastIndexOf","getRange","getDirectPrecedents","areas","getAddressPrecedents","setPrecedentsCells","_x21","_x2","_getAddressPrecedents","_callee13","outString","_context13","_ref10","_callee12","sheetName","_context12","split","newPrecedent","elements","_x22","findFormulaBySelectedRange","_findFormulaBySelectedRange","_callee15","_context15","_ref11","_callee14","formulasNotFindedflag","_context14","getSelectedRange","_x23","findFormulasByName","_x4","_findFormulasByName","_callee19","fName","_context19","_ref13","_callee18","_iterator2","_step2","_step2$value","tableName","formulasAux","_iterator3","_step3","_step3$value","fNameAux","addressFormula","bodyFormula","_context18","textContent","_slicedToArray","getFormulas","getNombre","getBody","includes","toLowerCase","toUpperCase","t1","_x25","getPageIndex","_x5","_getPageIndex","_callee21","increment","_context21","_ref14","_callee20","_context20","_x26","getPageIndexInterface","_x6","_getPageIndexInterface","_callee23","_context23","_ref15","_callee22","_context22","Math","min","ceil","max","log","_x27","_x7","_showTableData","_callee25","_context25","_ref16","_callee24","tablesSpaceAux","newElement","_context24","createElement","addEventListener","loadPageData","showFormulaData","appendChild","_x28","_x8","_x9","_showFormulaData","_callee27","startPageIndex","_context27","_ref17","_callee26","tablaAux","keysArray","valuesArray","endPageIndex","_context26","Array","from","generateFormulaGrid","generateVisGraph","_x29","_x10","_x11","_generateFormulaGrid","_callee28","formulasSpaceAux","formulaContainer","formulaKeyContainer","formulaBodyContainer","_context28","locateRange","_x12","_x13","_generateVisGraph","_callee30","rangeFormula","_context30","_ref18","_callee29","nodesAux","edgesAux","firstNode","nodes","edges","containerFormula","containerGraph","data","_context29","label","color","background","getPrecedentsCells","precedent","edgeAux","to","nodeAux","vis","DataSet","classList","Network","on","params","nodeId","_x30","_x14","_locateRange","_callee32","range","_context32","_ref19","_callee31","_context31","select","_x31","_x15","_loadPageData","_callee34","_context34","_ref20","_callee33","_context33","getSize","_x32","checkInputInterface","_x16","_x17","_checkInputInterface","_callee36","typeCheck","_context36","_ref21","_callee35","_context35","_x33","doesWorksheetExist","_x18","_x19","_doesWorksheetExist","_callee37","sheets","_iterator4","_step4","_context37","_generateWorksheetInfo","_callee39","_context39","_ref22","_callee38","worksheetNameAux","worksheet","auxRange","_iterator5","_step5","_step5$value","startRow","startRange","tableData","nombreTabla","formulaRows","_iterator6","_step6","_step6$value","formulaId","formula","_context38","getHeaderRowRange","rows","Office","requirements","isSetSupported","getUsedRange","format","autofitColumns","autofitRows","activate","_x34","showInputError","_showInputError","_callee41","_context41","_ref23","_callee40","_context40","alert","_x35","onReady","host","HostType","reload","getTables","_callee","_context","generateWorksheetInfo","_callee3","_context3","_callee2","_context2","buttonCancelSearch","_callee4","newStartIndex","_context4","_callee5","_context5","_callee6","filterPageValue","_context6","parseInt","_callee7","_context7","URL"],"sourceRoot":""}